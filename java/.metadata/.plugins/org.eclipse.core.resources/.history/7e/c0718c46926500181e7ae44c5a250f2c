package org.khtn.group12.cgg.admintool.application;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ResourceBundle;

import org.khtn.group12.cgg.admintool.model.Movie;

import com.google.auth.oauth2.GoogleCredentials;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.jfoenix.controls.JFXButton;
import com.jfoenix.controls.JFXTextArea;
import com.jfoenix.controls.JFXTextField;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.image.Image;
import javafx.stage.Stage;

public class CGGAdminTool implements Initializable {

	private static final String DATABASE_URL = "https://cggfirebaseproject-669b0.firebaseio.com/";

	@FXML
	private JFXButton btnAddMovieToFirebase;
	@FXML
	private JFXTextField tfName, tfImage, tfRating, tfLinkTrailer, tfPremiere, tfKind, tfDirectors, tfCast, tfTime,
			tfLanguage;
	@FXML
	private JFXTextArea taInfo;

	private DatabaseReference mFirebaseDatabase;
	private FirebaseDatabase mFirebaseInstance;

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub
		initFirebase();
	}

	public void initFirebase() {
		// Initialize Firebase
		try {
			// [START initialize]
			InputStream serviceAccount = getClass().getResourceAsStream(
					"/org/khtn/group12/cgg/admintool/resource/cggfirebaseproject-669b0-firebase-adminsdk-nkmvg-9dc7770772.json");
			FirebaseOptions options = new FirebaseOptions.Builder()
					.setCredentials(GoogleCredentials.fromStream(serviceAccount)).setDatabaseUrl(DATABASE_URL).build();
			FirebaseApp.initializeApp(options);
			// [END initialize]
		} catch (IOException e) {
			System.out.println("ERROR: invalid service account credentials. See README.");
			System.out.println(e.getMessage());
			System.exit(1);
		}

		mFirebaseInstance = FirebaseDatabase.getInstance();
		// Shared Database reference
		mFirebaseDatabase = mFirebaseInstance.getReference("movie");

		btnAddMovieToFirebase.setOnAction(e -> {
			isFillAll();
		});
	}

	private void isFillAll() {
		boolean isCancel = false;
		String error = "";
		if (!isTextFieldFill(tfName)) {
			error += "Name is Empty\n";
			isCancel = true;
		}
		if (!isTextFieldFill(tfImage)) {
			error += "Image is Empty\n";
			isCancel = true;
		}
		if (!isTextFieldFill(tfRating)) {
			error += "Rating is Empty\n";
			isCancel = true;
		}
		if (!isTextAreaFill(taInfo)) {
			error += "Info is Empty\n";
			isCancel = true;
		}
		if (!isTextFieldFill(tfLinkTrailer)) {
			error += "Link Trailer is Empty\n";
			isCancel = true;
		}
		if (!isTextFieldFill(tfPremiere)) {
			error += "Premiere is Empty\n";
			isCancel = true;
		}
		if (!isTextFieldFill(tfKind)) {
			error += "Kind is Empty\n";
			isCancel = true;
		}
		if (!isTextFieldFill(tfDirectors)) {
			error += "Directors is Empty\n";
			isCancel = true;
		}
		if (!isTextFieldFill(tfCast)) {
			error += "Cast is Empty\n";
			isCancel = true;
		}
		if (!isTextFieldFill(tfTime)) {
			error += "Time is Empty\n";
			isCancel = true;
		}
		if (!isTextFieldFill(tfLanguage)) {
			error += "Language is Empty\n";
			isCancel = true;
		}
		if (isCancel) {
			Alert errorAlert = new Alert(AlertType.ERROR);
			Stage stageAlert = (Stage) errorAlert.getDialogPane().getScene().getWindow();
			stageAlert.getIcons().add(new Image(MainRunApplication.PATH_IMG_APP));
			errorAlert.setTitle("Error!");
			errorAlert.setContentText(error);
			errorAlert.setHeaderText(null);
			errorAlert.showAndWait();
		} else {
			mFirebaseDatabase.child(mFirebaseDatabase.push().getKey())
					.setValueAsync(new Movie(tfName.getText(), tfImage.getText(), Float.parseFloat(tfRating.getText()),
							taInfo.getText(), tfLinkTrailer.getText(), tfPremiere.getText(), tfKind.getText(),
							tfDirectors.getText(), tfCast.getText(), tfTime.getText(), tfLanguage.getText()));
			tfName.clear();
			tfImage.clear();
			tfRating.clear();
			taInfo.clear();
			tfLinkTrailer.clear();
			tfPremiere.clear();
			tfKind.clear();
			tfDirectors.clear();
			tfCast.clear();
			tfTime.clear();
			tfLanguage.clear();
		}
	}

	private boolean isTextFieldFill(JFXTextField jFXTextField) {
		if (jFXTextField == null || jFXTextField.getText().trim().equals("")) {
			return false;
		} else {
			return true;
		}
	}

	private boolean isTextAreaFill(JFXTextArea jfxTextArea) {
		if (jfxTextArea == null || jfxTextArea.getText().trim().equals("")) {
			return false;
		} else {
			return true;
		}
	}
}
